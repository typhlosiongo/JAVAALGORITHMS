import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;

//------------------------------------------------------
public class Foothill
{
   final static int MAT_SIZE = 1600;
   
   // -------  proof of correctness --------------
   public static void main(String[] args) throws Exception
   {
      int r, randRow, randCol;
      long startTime, stopTime;
      double randFrac;
      double smallPercent;
      NumberFormat tidy = NumberFormat.getInstance(Locale.US);
      tidy.setMaximumFractionDigits(4);

      // non-sparse matrices
      double[][] mat, matAns;

      // allocate matrices
      //  ??
      mat = new double[MAT_SIZE][MAT_SIZE];
      matAns = new double[MAT_SIZE][MAT_SIZE];
      
      // generate small% of non-default values bet 0 and 1
      smallPercent = MAT_SIZE/10. * MAT_SIZE;
      for (r = 0; r < smallPercent; r++)
      {
         Random rand = new Random();
         randRow =  rand.nextInt(MAT_SIZE);
         randCol = rand.nextInt(MAT_SIZE);
         randFrac = rand.nextDouble();
         mat[randRow][randCol] = randFrac;
      }
      
      // 10x10 submatrix in lower right
      matShow(mat, MAT_SIZE - 10, 10);
      System.out.println("");
      startTime = System.nanoTime();
      matMult(mat, mat, matAns);
      stopTime = System.nanoTime();

      matShow(matAns, MAT_SIZE - 10, 10);
      
      System.out.println("\nSize = " + MAT_SIZE + " Mat. Mult. Elapsed Time: "
         + tidy.format( (stopTime - startTime) / 1e9)
         + " seconds.");
   }
   
   //takes two input matrices, and the third a return (reference)
   //product matrix:
   public static void matMult(double [][] matA, double [][] matB, 
         double [][] matC)
   {
      for(int i = 0; i < matA.length; i++)
      {
         for(int j = 0; j < matB[i].length; j++)
         {
            double dotProduct = 0;
            for(int k = 0; k < matA[i].length; k++)
            {
               dotProduct += matA[i][k]* matB[k][j];
            }
            matC[i][j] = dotProduct;
         }
      }
   }
   
   //method to display matrices
   public static void matShow(double [][] matA, int start, int size)
   {
      for(int i = start; (i < start + size && i < matA.length); i++)
      {
         for(int j = start; (j < start + size && j < matA[i].length); j++)
         {
            System.out.printf("%7.1f", matA[i][j]);
         }
         System.out.println(" ");
      }
   }
}
/*-----------TEST RUN-------------
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.7    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.5 
    0.0    0.0    0.0    0.0    0.8    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.9    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.3    0.0    0.0    0.0    0.0    0.0    0.0 

    0.2    0.0    0.0    0.6    0.0    0.0    0.0    0.0    0.2    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.1    0.4 
    0.0    0.4    0.5    0.8    0.0    0.0    0.0    0.2    0.0    0.0 
    0.0    0.3    0.0    0.2    0.5    0.5    0.0    0.6    0.4    0.4 
    0.2    0.0    0.0    0.2    0.6    0.5    0.0    0.0    0.0    0.0 
    0.1    0.0    0.0    0.1    0.7    0.0    0.1    0.0    0.9    0.8 
    0.0    0.5    0.1    0.4    0.9    0.0    0.0    0.0    0.0    0.0 
    0.0    1.0    0.1    0.0    0.0    0.2    0.0    0.3    0.4    0.5 
    0.0    0.0    0.0    0.0    0.6    0.6    1.0    0.1    0.5    0.5 
    0.0    0.1    0.0    0.0    0.0    0.0    0.0    0.7    0.2    0.2 

Size = 100 Mat. Mult. Elapsed Time: 0.0051 seconds.

    0.0    0.1    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.3    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    1.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.2 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.4 
    0.0    0.0    0.3    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.0    0.0    0.2    0.0    0.0    0.4    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0 
    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.3    0.3    0.6 

    0.0    0.0    0.0    0.4    0.8    0.0    0.9    0.7    0.3    1.0 
    0.1    0.2    0.4    1.3    0.7    0.4    0.8    0.5    0.1    0.5 
    0.0    0.2    0.7    2.5    0.9    0.5    0.0    0.2    0.1    1.5 
    0.0    0.8    0.2    1.3    0.8    0.0    0.8    0.0    0.6    1.5 
    0.3    0.2    0.1    0.4    0.0    0.5    0.3    0.1    0.3    0.7 
    0.5    0.7    0.2    0.3    0.1    0.3    0.5    0.3    0.0    0.2 
    0.2    0.0    0.5    0.6    0.4    0.2    0.2    0.4    0.5    0.9 
    0.5    0.2    0.0    0.8    0.3    0.0    0.7    0.0    0.8    0.3 
    0.8    0.2    0.4    0.6    0.1    0.6    0.0    0.2    0.5    1.3 
    0.8    0.4    0.0    0.9    0.5    0.5    0.3    1.2    1.2    0.7 

Size = 200 Mat. Mult. Elapsed Time: 0.0168 seconds.

Because of the three loops, the BigOh of the algorithm is N^3


1. What was the smallest M that gave you a non-zero time?
   the smallest M was 12 with 0.0001 seconds
2. What happened when you doubled M, tripled it, quadrupled it, etc?  
   Give several M values and their times in a table
   Size = 200 Mat. Mult. Elapsed Time: 0.0166 seconds.
   Size = 400 Mat. Mult. Elapsed Time: 0.119 seconds.
   Size = 800 Mat. Mult. Elapsed Time: 3.6856 seconds.
   Size = 1600 Mat. Mult. Elapsed Time: 54.0616 seconds.
   doubling m increased the time it took.
3. How large an M can you use before the program refuses to run (exception
   or run-time error due to memory overload) or it takes so long you can't wait
   for the run?
   Size = 3200 Mat. Mult.
4. How did the data agree or disagree with your original time complexity 
   estimate.
   time increases a lot faster.

 */

